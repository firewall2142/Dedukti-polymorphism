
(;---------- PUBLIC SIG ----------;)

(; Represents the type of sorts ;)
Sort: Type.

(; encoded versions of CTS type living in sort s ;)
Univ: s : Sort -> Type.	

(; `Term s A` is the encoded version of term living in type A ;)
def Term : s : Sort -> a : Univ s -> Type.

bool : Type.
eps : bool -> Type.
true : bool.

def Axiom : Sort -> Sort -> bool.
def Rule : Sort -> Sort -> Sort -> bool.
def Cumul : Sort -> Sort -> bool.
def SubType : s : Sort -> s' : Sort -> Univ s -> Univ s' -> bool.

def sinf : Sort.
def univ : s : Sort -> s' : Sort -> eps (Axiom s s') -> Univ s'.
def prod : s1 : Sort -> s2 : Sort -> s3 : Sort -> eps (Rule s1 s2 s3) -> a : Univ s1 -> b : (Term s1 a -> Univ s2) -> Univ s3.
def cast : s : Sort -> s' : Sort -> a : Univ s -> b : Univ s' -> eps (SubType s s' a b) -> Term s a -> Term s' b.


univ' (s : Sort) (s' : Sort) : Univ s'.
def prod' : s1 : Sort -> s2 : Sort -> s3 : Sort -> a : Univ s1 -> b : (Term s1 a -> Univ s2) -> Univ s3.
def cast' : s : Sort -> s' : Sort -> a : Univ s -> b : Univ s' -> Term s a -> Term s' b.


(;---------- PRIVATE SIG ----------;)
[s,s',p] univ s s' p --> univ' s s'.
[s1,s2,s3,p] prod s1 s2 s3 p --> prod' s1 s2 s3.
[s1,s2,a,b,t] cast s1 s2 a b _ t --> cast' s1 s2 a b t.

[s] Term _ (univ' s _) --> Univ s.
[s1,s2,a,b] Term _ (prod' s1 s2 _ a b) --> x : Term s1 a -> Term s2 (b x).
[s,a] Term _ (cast' _ _ (univ' s _) _ a) --> Term s a.

def forall : s : Sort -> a : Univ s -> (Term s a -> bool) -> bool.
[] forall _ _ (x => true) --> true.
I : eps true.

[s1, s2] SubType _ _ (univ' s1 _) (univ' s2 _ ) --> Cumul s1 s2
[s1,s2,s2',a,b,b'] SubType _ _ (prod' s1 s2 _ a b) (prod' _ s2' _ a b') --> forall s1 a (x => SubType s2 s2' (b x) (b' x)).
[a] SubType _ _ a a --> true.

[A,t] cast' _ _ A A t --> t.
[s, s', a, c, t] cast' _ s' _ c (cast' s _ a _ t) --> cast' s s' a c t.
[s1,s2,A,B,a] cast' _ s2 (cast' _ _ (univ' s1 _) _ A) B a --> cast' s1 s2 A B a.
[s1,s2,A,B,a] cast' s1 _ A (cast' _ _ (univ' s2 _) _ B) a --> cast' s1 s2 A B a.
[s1,s2,s3,s4,a,b] cast' _ _ (univ' _ _) (univ' s4 _) (prod' s1 s2 s3 a b) --> prod' s1 s2 s4 a b.
[s1,s2,s3, a, b] prod' _ s2 s3 (cast' _ _ (univ' s1 _) (univ' _ _) a) b --> prod' s1 s2 s3 a b.
[s1, s2, s3, a, b] prod' s1 _ s3 a (x => cast' _ _ (univ' s2 _) (univ' _ _) (b x)) --> prod' s1 s2 s3 a (x => b x).
[s1,s2,s3,A,B,C,b] cast' _ _ (prod' s1 s2 _ A B) (prod' s1 s3 _ A C) (x => b x) --> x : Term s1 A => cast' s2 s3 (B x) (C x) (b x).
[s1,s2,s3,A,B,C,b,a] cast' _ _ (prod' s1 s2 _ A B) (prod' s1 s3 _ A C) b a --> cast' s2 s3 (B a) (C a) (b a).


(;---------- STTFA SPEC ----------;)
def triangle : Sort.
def diamond : Sort.
def box : Sort.
def star : Sort.

[] Axiom star box --> true.
[] Axiom box triangle --> true.
[] Axiom diamond sinf --> true.
[] Axiom triangle sinf --> true.


[] Rule star star star --> true.
[] Rule box box box --> true.
[] Rule box star star --> true.
[] Rule triangle star star --> true. 
[] Rule triangle diamond diamond --> true. 
[] Rule triangle box diamond --> true.

(;---------- AGDA SPEC -----------;)
def set0 : Sort.
def set1 : Sort.
def set2 : Sort.
def set3 : Sort.
def set4 : Sort.

(; LRA ;)

def UNat : Type.
def enum : UNat -> Sort.
def uzero : UNat.
def usucc : UNat -> UNat.
def eq : Sort -> Sort -> bool.
def max : Sort -> Sort -> Sort.
def succ : Sort -> Sort.



[a]     succ (enum a) --> enum (usucc a).

[a]     Axiom (enum a) (enum (usucc a)) --> true.

[a,b,c] Rule (enum (usucc a)) (enum (usucc b)) (enum (usucc c)) --> 
           Rule (enum a) (enum b) (enum c).
[a]     Rule (enum uzero) a a --> true.
[a]     Rule a (enum uzero) a --> true.

[a]     Cumul a a --> true.





















(; var defs ;)

def ?_t0 : Type.
def ?_u0 : ?_t0.
def ?_t1 : Type.
def ?_u1 : ?_t1.
def ?_t2 : Type.
def ?_u2 : ?_t2.
def ?_t3 : Type.
def ?_u3 : ?_t3.
def ?_t4 : Type.
def ?_u4 : ?_t4.
def ?_t5 : Type.
def ?_u5 : ?_t5.
def ?_t6 : Type.
def ?_u6 : ?_t6.
def ?_t7 : Type.
def ?_u7 : ?_t7.
def ?_t8 : Type.
def ?_u8 : ?_t8.
def ?_t9 : Type.
def ?_u9 : ?_t9.
def ?_t10 : Type.
def ?_u10 : ?_t10.
def ?_t11 : Type.
def ?_u11 : ?_t11.
def ?_t12 : Type.
def ?_u12 : ?_t12.
def ?_t13 : Type.
def ?_u13 : ?_t13.
def ?_t14 : Type.
def ?_u14 : ?_t14.
def ?_t15 : Type.
def ?_u15 : ?_t15.
def ?_t16 : Type.
def ?_u16 : ?_t16.
def ?_t17 : Type.
def ?_u17 : ?_t17.
def ?_t18 : Type.
def ?_u18 : ?_t18.
def ?_t19 : Type.
def ?_u19 : ?_t19.
def ?_t20 : Type.
def ?_u20 : ?_t20.
def ?_t21 : Type.
def ?_u21 : ?_t21.
def ?_t22 : Type.
def ?_u22 : ?_t22.
def ?_t23 : Type.
def ?_u23 : ?_t23.
def ?_t24 : Type.
def ?_u24 : ?_t24.
def ?_t25 : Type.
def ?_u25 : ?_t25.
def ?_t26 : Type.
def ?_u26 : ?_t26.
def ?_t27 : Type.
def ?_u27 : ?_t27.


